# Working with files on GitHub {#sec-working-with-files}

<!-- TODO: Add an introduction here -->

## Learning objectives

The learning objectives of this session are:

{{< include /includes/_working-with-files-objectives.qmd >}}

During the session, you will:

-   Add a cookie recipe and a soup recipe to your repository.
-   Rename and move the recipe files to new folders.
-   Delete the soup recipe and the folder it is in.
-   Look at the history of your repository to find a specific change.

Right now, your repository file structure looks like this:

```         
recipe-book/
TODO: What is in the repo at this point?
```

By the end of the session, your repository file structure will look like
this:

```         
recipe-book/
├── baked-goods/
│   └── chocolate-chip-cookies.md
```

## :book: Reading task: Naming of files and folders

**Time: \~5 minutes.**

Before we start adding files and folders to our repositories, let's take
a moment to talk about good naming practices for files and folders.

When working with files and folders in a repository---and in
general---it's important to think about how you name them. Good naming
practices can help you and others understand the content of a file or
folder and make it easier to find what you are looking for.

Avoiding certain characters can also help prevent issues when working
with files across different operating systems (like Windows, Mac, and
Linux).

Here are some tips for good naming practices:

-   **Use descriptive names**: Choose names that describe the content of
    the file or folder. For example, instead of naming a file
    `file1.md`, name it `data-analysis-results.md`.
-   **Use lowercase letters**: Filenames are case-sensitive on some
    operating systems, so it is a good practice to use lowercase letters
    to avoid confusion.
-   **Use hyphens or underscores**: If you need to separate words in a
    filename, use hyphens (`-`) or underscores (`_`) instead of spaces.
    For example, instead of `data analysis results.md`, use
    `data-analysis-results.md` or `data_analysis_results.md`.
-   **Avoid special characters**: Some special characters, such as `&`,
    `?`, `#`, and the Danish `æ`, `ø`, `å`, can cause issues in
    filenames. It is best to avoid using them. If you work in Danish and
    have a file name with `æ`, `ø`, or `å`, you can use the English
    equivalents (`ae`, `oe`, and `aa`) instead.
-   **Use file extensions**: Use file extensions to indicate the type of
    file. For example, use `.md` for Markdown files, and `.csv` for CSV
    files.

{{< text_snippet sticky_up >}}

## Add a soup recipe

Now, we'll create our first file on GitHub. Let's add a soup
recipe :bowl_with_spoon:.

In the "Code" tab of the repository, we'll click the button saying "Add file"
in the top-right side of the page. In the dropdown menu, we'll click "Create
new file".

This leads us to a new page with an empty file without any content.

In the "Name your file..." field, in the top-left corner, we'll type the name
of our file. Let's follow the good naming practices we've read about
above and call it `soup.md`.

For the content of the file, we'll copy and paste the following recipe:

``` markdown
Ingredients for tomato soup 

- 4 tbs butter
- 0.5 large onion, cut into large wedges
- 1 can of tomatoes
- 1,5 cups water, vegetable or chicken stock
- 0.5 tsp salt, or more to taste

Instructions

1. Melt the butter over medium heat in a large saucepan.
2. Add onion wedges, water, tomatoes with their juices, and salt.
3. Bring to a simmer and cook for about 40 minutes. Stir occasionally.
4. Blend the soup, and season to taste.
```

Once we have added the file name and the recipe itself, let's save the changes by clicking the green
"Commit changes" button in the top right corner of the page.

As the commit message, we'll write "Add tomato soup recipe". We
don't need to write an extended description. We'll keep the "Commit directly
to the `main` branch" option selected, then click the "Commit changes" button.

We've now added our first recipe to the repository! :tada: Now, you'll practice creating files in your repository by adding another
recipe.

## :woman_technologist: Exercise: Add a cookie recipe to your repository

**Time: \~10 minutes**

Now you'll add the second recipe to your repository: A cookie recipe!
:cookie:

1.  In the "Code" tab of your repository, click the "Add file" button
    and then "Create new file".
2.  In the "Name your file..." field, type the name of your file. Let's
    call it `cooke-recipe.md`. Remember to not use spaces in the file
    name as well as the `.md` file extension so you create a
    [Markdown](https://quarto.org/docs/authoring/markdown-basics.html)
    file.
3.  Add a cookie recipe to the file by either finding one online or
    using the example recipe below.
4.  Click the green "Commit changes" button and write a descriptive
    commit message like "Add cookie recipe". You don't need to write an
    extended description. Keep the "Commit directly to the `main`
    branch" option selected.
5.  When you have filled in the commit message, click the green "Commit
    changes" button.

**Example cookie recipe:**

``` markdown
Ingredients for cookies

- 240 grams flour
- 3/4 tsp salt
- 140 grams butter
- 145 grams brown sugar
- 115 grams sugar
- 1 1/2 tsp vanilla powder
- 1 egg
- 1/2 tsp baking soda
- 1 tsp baking powder
- 150 grams chocolate (e.g., a mix of dark and milk chocolate)
- 100 grams chopped hazelnuts (can be omitted or replaced with oats)

Instructions

1. Mix the sugar, brown sugar, and butter well.
2. Add the egg and mix again.
3. Add salt, baking powder, vanilla powder, baking soda, and flour.
4. Add the chopped chocolate and nuts.
5. Form clumps of dough on a baking tray with plenty of space between them.
6. Bake at 175°C (top and bottom heat) for 16.5-17 minutes.
7. Once baked, transfer the baking paper with the cookies onto a wire rack and let them cool for 10 minutes before removing them from the paper.
```

You have now added your second recipe and made another commit to your
repository! :tada:

{{< text_snippet sticky_up >}}

## :technologist: Exercise: Rename, edit, and move the `cookie-recipe.md` file

**Time: \~10 minutes**

Just like we did with the soup recipe above, let's rename the
`cookie-recipe.md` file so the name is more specific. Let's also move it
to a new `baked-goods/` folder. That way, if you want to add other
recipes for baked goods, you can put it in that folder.

While you can rename, edit, and move in the same step, for practice,
rename the file first, then edit the content, and last move it to the
new folder.

Start by renaming the `cookie-recipe.md` file:

1.  Click the pencil icon on the top-right side of the page ("Edit this
    file") to edit the `cookie-recipe.md` file.
2.  Click the name of the file at the top-left of the page and rename
    the file to `chocolate-chip-cookies.md`. Remember to not use spaces
    in the file name and keep the file extension (`.md`).
3.  Commit the changes as we have done it previously, by clicking the
    green "Commit changes" button and fill in the commit message.

Similarly to the soup recipe, change the first line of the
`chocolate-chip-cookies.md` file:

1.  Click the pencil icon on top-right side of the page ("Edit this
    file") to edit the file.
2.  Edit the first line of the file by adding "chocolate chip", so it
    becomes "Ingredients for chocolate chip cookies".
3.  Commit the changes.

Next, move the file to a new `baked-goods/` folder:

1.  Click the pencil icon on the top-right side of the page ("Edit this
    file") as we did before on the `chocolate-chip-cookies.md` file.
2.  Click the name of the file at the top-left of the page and change
    the path of the file to a new folder to your repository. The current
    file path is `chocolate-chip-cookies.md`. To create a new folder,
    change the file path by typing `baked-goods/` at the start of the
    file name, so the whole file path
    becomes`baked-goods/chocolate-chip-cookies.md`. Notice the `/`
    between the folder name and the file name.
3.  Commit the changes.

You have now renamed your cookies recipe file and moved it to a new
folder in your repository! :partying_face:

{{< text_snippet sticky_up >}}

## Delete files and folders in a GitHub repository

Let's imagine that we have decided that our recipe book should solely
focus on recipes for sweets, desserts, and baked goods.

This means that we'll want to remove the tomato soup recipe from the
repository along with the `soups/`folder.

To delete the `tomato-soup.md` file and the `soups/` folder, we'll click
the `soups/` folder in the "Code" tab of the repository and then click
the `tomato-soup.md` file within it.

In the top-right corner of the page, we'll click the button with three
dots (`...`), scroll down to the bottom of the dropdown menu and click
"Delete file".

We'll save the changes by committing the changes as we have done before.

Since there was no other files in the `soups/` folder, the folder will
be deleted as well :fire:

We have now deleted the tomato soup recipe and the `soups/` folder from
the repository and are ready to focus on sweets and baked goods! :cake:

::: callout-tip
## Delete a folder with multiple files

If you wanted to delete a folder with multiple files in it along with
the files themselves, you can go to the folder and click the three dots
button (`...`) in the top-right corner of the page. Then, click "Delete
directory" in the dropdown menu.

This will delete the folder and all the files within it, so be careful
with deleting folders directly like this.
:::

## Explore the history to find previous changes

Now that we've have made quite a few changes to the repository, it's
time to take a look at the history of the repository. This will show all
the changes that have been made to the repository, who made them, and
when they were made.

This can be very useful if you want to see what changes have been made
over time or if you want to find a specific change.

Let's say you want to find the commit where you added the cookie recipe.
You can do this by looking at the history of the repository or the
history of the file itself.

Because we've made a few changes to the repository, let's explore the
history of the entire repository.

In the "Code" tab of the repository, click the "Commits" button on the
top-right side of the page. This leads us to a page that shows all the
changes that have been made to the repository along with the commit
messages, the author of the changes, and when the changes where made.
Neat!

Now, we'll go through the list of commits to find the commit where we
added the cookie recipe. The commit message should be "Add cookie
recipe". Notice where you can see the author of the commit and when the
commit was made.

Let's click on the commit message to see what was changed in that
commit. Take a moment to explore the information that GitHub provides
about the commit. On the left side of the page, we can see which files
were changed in the commit, and on the right side, we can see the
specific changes that were made to the file. In the top-left corner of
the page, we can still see who made the changes and when they committed
these changes.

If we want to go back to the list of commits, we can just click the

::: callout-note
## Importance of meaningful commit messages

When we explore at the history of the repository, it shows the
importance of meaningful commit messages. Imagine if all the commit
messages were "Update file". Then, it would be quite cumbersome to find
the change we were looking for.

By contrast, if the commits have meaningful messages (like "Add cookie
recipe" or "Move cookie recipe to baked-goods folder"), it is much
easier to get an overview of the changes and locate the one we're
looking for.
:::

::: callout-tip
## History of a specific file

It is both possible to explore at the history of the entire repository
and the history of a specific file. The history of the entire repository
shows all the commits that have been made to all files in the
repository, while the history of a specific file shows the commits that
have been made to that file only.

You can access the history of a specific file by going to the file in
the repository and clicking the "History" button on the top-right side
of the page.
:::

## :speech_balloon: Discussion activity: Consider how you'd use GitHub in your work

**Time: \~4 minutes.**

Learning is most effective when there is some connection to what you do
in your daily work life. On your own and based on what we've covered so
far, think about how you might use GitHub in your own work. Then, share
some of your ideas with your neighbour.

1.  Take \~1 minute to think how you might use GitHub in your own work.
2.  Then, pair up with your neighbour and take 3 minutes (1.5 minutes
    each) to share your ideas.

## Summary

In this session, we have explored how to work with files on GitHub. In
particular, we have:

-   Added files and folders to a GitHub repository
-   Renamed, edited, and moved files in the repository
-   Deleted files and folders from the repository
-   Explored the history of the repository to see the changes that have
    been made
