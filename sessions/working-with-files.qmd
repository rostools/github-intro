# Working with files on GitHub {#sec-working-with-files}

<!-- TODO: Add an introduction here -->

## Learning objectives

The learning objectives of this session are to:

{{< include /includes/objectives/_working-with-files.qmd >}}

During the session, you will:

-   Add a cookie recipe and a soup recipe to your repository.
-   Rename and move the recipe files to new folders.
-   Delete the soup recipe and the folder it is in.
-   Look at the history of your repository to find a specific change.

Right now, your repository file structure looks like this:

```
recipes/
└── README.md
```

By the end of the session, your repository file structure will look like
this:

```
recipes/
├── baked-goods/
│ └── chocolate-chip-cookies.md
└── README.md
```

## :book: Reading task: Naming of files and folders

::: {.callout-note collapse="true"}
## :teacher: Teacher note

Emphasise mainly not to use spaces in file names and *why*, not to use
special characters and *why*, and to remember file extensions and *why*.
:::

**Time: \~5 minutes.**

Before we start adding files and folders to our repositories, let's take
a moment to talk about good naming practices for files and folders.

When working with files and folders in a repository---and in
general---it's important to think about how you name them. Good naming
practices can help you and others understand the content of a file or
folder and make it easier to find what you are looking for.

Avoiding certain characters can also help prevent issues when working
with files across different operating systems (like Windows, Mac, and
Linux).

Here are some tips for good naming practices:

-   **Use descriptive names**: Choose names that describe the content of
    the file or folder. For example, instead of naming a file
    `file1.md`, name it `data-analysis-results.md`.
-   **Use lowercase letters**: Filenames are case-sensitive on some
    operating systems, so it is a good practice to always use lowercase
    letters when naming files and folders to avoid confusion.
-   **Use hyphens or underscores**: If you need to separate words in a
    filename, use hyphens (`-`) or underscores (`_`) instead of spaces.
    For example, instead of `data analysis results.md`, name your file
    `data-analysis-results.md` or `data_analysis_results.md`. Spaces can
    introduce issues in some situations and contexts. So, it’s
    best to avoid them altogether.
-   **Avoid special characters**: Some special characters, such as `&`,
    `?`, `#`, and the Danish `æ`, `ø`, `å`, can cause issues in
    filenames, so it's best to avoid using them. If you work in Danish
    and have a file name with `æ`, `ø`, or `å`, you can use the
    non-Danish equivalents (`ae`, `oe`, and `aa`) instead.
-   **Use file extensions**: Remember to include file extensions in your
    file names to indicate the type of file. For example, use `.md` for
    Markdown files (`soup.md`), and `.csv` for CSV files (`budget.csv`).

{{< text_snippet sticky_up >}}

## Add a soup recipe

Now, it's time to create the first file on GitHub. Let's add a soup
recipe together! :bowl_with_spoon:.

In the "Code" tab of the repository, we'll click the button saying "Add
file" in the top-right side of the page. In the dropdown menu, we'll
click "Create new file".

This leads us to a new page with an empty, unnamed file.

In the "Name your file..." field, in the top-left side of the page,
we'll type the name of our file. Let's follow the good naming practices
we've read about above and call it `soup.md`.

For the content of the file, we'll copy and paste the following recipe:

``` markdown
Ingredients for soup

- 4 tbs butter
- 0.5 large onion, cut into large wedges
- 1 can of tomatoes
- 1.5 cups water, vegetable or chicken stock
- 0.5 tsp salt, or more to taste

Instructions

1. Melt the butter over medium heat in a large saucepan.
2. Add onion wedges, water, tomatoes with their juices, and salt.
3. Bring to a simmer and cook for about 40 minutes. Stir occasionally.
4. Blend the soup, and season to taste.
```

Once we have added the file name and the recipe itself, let's save the
changes. {{< var github-commit >}}

::: callout-tip
A descriptive message for these changes could be "Add soup recipe"
:::

We've now added our first recipe to the repository! :tada: Now, you'll
practice creating files in your repository by adding another recipe.

## :woman_technologist: Exercise: Add a cookie recipe to your repository

**Time: \~10 minutes**

In this exercise, you'll add the second recipe to your `recipes`
repository: A cookie recipe! :cookie:

1.  As we did with the soup recipe before: In the "Code" tab of your
    repository, click the "Add file" button and then "Create new file".
2.  In the "Name your file..." field, type the name of your file. Let's
    call it `cookies.md`. Remember to not use spaces in the file name as
    well as to add the `.md` file extension so you create a
    [Markdown](https://quarto.org/docs/authoring/markdown-basics.html)
    file.
3.  Add a cookie recipe to the file by either finding one online or
    using the example recipe below.
4.  Now, save the changes. {{< var github-commit >}}

::: callout-tip
A descriptive message for these changes could be "Add cookie recipe"
:::

**Example cookie recipe:**

``` markdown
Ingredients for cookies

- 240 grams flour
- 3/4 tsp salt
- 140 grams butter
- 145 grams brown sugar
- 115 grams sugar
- 1 1/2 tsp vanilla powder
- 1 egg
- 1/2 tsp baking soda
- 1 tsp baking powder
- 150 grams chocolate (e.g., a mix of dark and milk chocolate)
- 100 grams chopped hazelnuts (can be omitted or replaced with oats)

Instructions

1. Mix the sugar, brown sugar, and butter well.
2. Add the egg and mix again.
3. Add salt, baking powder, vanilla powder, baking soda, and flour.
4. Add the chopped chocolate and nuts.
5. Form clumps of dough on a baking tray with plenty of space between them.
6. Bake at 175°C (top and bottom heat) for 16.5-17 minutes.
7. Once baked, transfer the baking paper with the cookies onto a wire rack
   and let them cool for 10 minutes before removing them from the paper.
```

You have now added your second recipe and made another commit to your
repository! :tada:

{{< text_snippet sticky_up >}}

## Rename, edit, and move the soup recipe to a new folder

Now, we'll take a look at how to rename, edit, and move files in
repositories on GitHub.

Let's imagine that we want to add more recipes to the repository in the
future. To keep things organised, we want our recipes to have
descriptive names and content. We also want to create some folders to
group similar recipes together.

Let's start by doing this with the soup recipe.

### Rename `soup.md` {.unnumbered}

Let's start by renaming the `soup.md` file. We'll go to the `soup.md`
file in the repository by clicking on it in the "Code" tab. Then, we'll
click the pencil icon {{< var pencil-icon >}} on the top-right side of
the page to edit the file.

On the top-left side of the page, we'll see the name of the file. Let's
click on the name and rename the file to `tomato-soup.md`. Remember to
keep the `.md` file extension.

Once we have renamed the file, let's commit the changes.
{{< var github-commit >}}

::: callout-tip
You might have noticed that GitHub automatically creates a commit
message for you. Remember that you can edit this message to make it more
descriptive. It's a good practice to edit it to be more descriptive, as
it helps you and others understand the changes that were made to the
repository. Otherwise, you might end up with a commit history that is
"Update file", "Update file", "Update file", etc. :grimacing:

A descriptive commit message for these changes could be "Rename soup
recipe to tomato soup".
:::

### Edit the content of `tomato-soup.md` {.unnumbered}

When we added the content of the file, you might have noticed that it
said "Ingredients for soup" on the first line. This is a bit generic, so
let's change it.

Like before, we'll click the `tomato-soup.md` file in the "Code" tab of
the repository to open it and click the pencil icon
{{< var pencil-icon >}} on the top-right side of the page.

Now, let's revise the first line of the file to be "Ingredients for
tomato soup". Once we've made the changes, let's commit them.
{{< var github-commit >}}

::: callout-tip
A descriptive commit message for these changes could be "Edit heading to
specify that this is a tomato soup recipe".
:::

### Move `tomato-soup.md` to a new `soups/` folder {.unnumbered}

Next, let's move the `tomato-soup.md` file to a new `soups/` folder.

As before, we'll click the `tomato-soup.md` file to open it and click
the pencil icon {{< var pencil-icon >}} on the top-right side of the
page.

Now, let's change the path of the file to a new folder in the
repository, by adding `soups/` before the file name like so:
`soups/tomato-soup.md`. Remember to use `/` between the folder name and
the file name.

This will create a new folder in your `recipes` repository called
`soups/` and then move the `tomato-soup.md` file into it.

::: callout-tip
### Fixing a folder name after typing slash `/`

You might have noticed that once we add the slash `/` after the folder
name, GitHub moves the cursor to the end of the file path, to the file
name. This might make it seem like we can't go back to the folder name
and correct it if we make a typo or want to change it.

However, we can use the backspace key to remove the `/` which leads the
cursor back to the folder name. Now, we can change the folder name as we
like :partying_face:
:::

{{< var github-commit >}}

::: callout-tip
A descriptive message for these changes could be "Move tomato soup
recipe into a new soups folder".
:::

We have now renamed the soup recipe file, edited its content, and moved
it to a new folder in your repository! You can see the new folder
`soups/` in the `Code` tab of your repository and even click on it to
see the `tomato-soup.md` file. :bowl_with_spoon: :tomato:

::: callout-note
### Renaming, editing, and moving files can be done in the same step

It is possible to rename, edit, and move files in the same step if you
want to. However, for practice and clarity in the history, we've split
these changes into separate steps.
:::

## :technologist: Exercise: Rename, edit, and move the `cookies.md` file

**Time: \~10 minutes**

Just like we did with the soup recipe above, let's rename the
`cookies.md` file so the name is more specific. Let's also move it to a
new `baked-goods/` folder. That way, if you want to add other recipes
for baked goods, you can put it in that folder.

While you can do these changes in one step, for practice, rename the
file first, then edit the content, and last move it to the new folder.

Start by renaming the `cookies.md` file:

1.  Click the pencil icon {{< var pencil-icon >}} on the top-right side
    of the page ("Edit this file") to edit the `cookies.md` file.
2.  Click the name of the file at the top-left of the page and rename
    the file to `chocolate-chip-cookies.md`. Remember to not use spaces
    in the file name and to keep the file extension (`.md`).
3.  {{< var github-commit >}} Here, a descriptive message could be
    "Rename cookie recipe to chocolate chip cookies".

Edit the `chocolate-chip-cookies.md` file by changing the first line:

1.  Click the pencil icon {{< var pencil-icon >}} on top-right side of
    the page ("Edit this file") to edit the file.
2.  Edit the first line of the file by adding "chocolate chip", so it
    becomes "Ingredients for chocolate chip cookies".
3.  {{< var github-commit >}} Here, a descriptive message could be "Edit
    heading to specify that this is a chocolate chip cookie recipe".

Next, move the file to a new `baked-goods/` folder:

1.  Click the pencil icon {{< var pencil-icon >}} on the top-right side
    of the page ("Edit this file") as we did before on the
    `chocolate-chip-cookies.md` file.
2.  Click the name of the file at the top-left of the page and change
    the path of the file to a new folder in your repository. The current
    file path is `chocolate-chip-cookies.md`. To create a new folder,
    change the file path by typing `baked-goods/` at the beginning of
    the file name, so the path
    becomes `baked-goods/chocolate-chip-cookies.md`. Notice the `/`
    between the folder name and the file name.
3.  {{< var github-commit >}} Here, a descriptive message could be "Move
    cookie recipe to baked-goods folder".

You have now renamed your cookies recipe file and moved it to a new
folder in your repository! :partying_face:

{{< text_snippet sticky_up >}}

## Delete files and folders in a GitHub repository

Let's imagine that we have decided that our recipe book should solely
focus on recipes for sweets, desserts, and baked goods. This means that
we want to remove the tomato soup recipe from the repository along with
the `soups/`folder.

To delete the `tomato-soup.md` file and the `soups/` folder, we'll click
the `soups/` folder in the "Code" tab of the repository and then click
the `tomato-soup.md` file within it.

In the top-right corner of the page, we'll click the button with three
dots ({{< var ellipsis-icon >}}), scroll down to the bottom of the
dropdown menu and click "Delete file".

We'll save the changes by committing the changes as we have done before.

Since there were no other files in the `soups/` folder, the folder will
be deleted as well :fire:

We have now deleted the tomato soup recipe and the `soups/` folder from
the repository and are ready to focus on sweets and baked goods! :cake:

::: callout-tip
### Delete a folder with multiple files

If you wanted to delete a folder with multiple files in it along with
the files themselves, you can go to the folder and click the three dots
button ({{< var ellipsis-icon >}}) in the top-right corner of the page.
Then, click "Delete directory" in the dropdown menu.

This will delete the folder and all the files within it, so be careful
with deleting folders directly like this.
:::

## Explore the history to find previous changes

Now that we've made several changes, let's look at the repository's
history. This shows what changes were made, who made them, and when they
were made. This is very useful for tracking progress or finding specific
changes. On GitHub, we can see the history of the entire repository or
the history of a specific file.

Because we've only made a few changes to the repository, let's explore
the history of the entire repository to locate the commit where we first
added the cookie recipe.

In the "Code" tab of the repository, click the "{{< var history-icon >}}
Commits" button on the top-right side of the page. This leads us to a
page that shows all the changes that have been made to the repository
along with the commit messages, the author of the changes, and when the
changes where made. Neat!

Now, we'll go through the list of commits to find the commit where we
added the cookie recipe. The commit message should be something like
"Add cookie recipe". Notice where you can see the author of the commit
and when the commit was made.

Let's click on the commit message to see what was changed in that
commit. Take a moment to explore the information that GitHub provides
about the commit. On the left side of the page, we can see which files
were changed in the commit, and on the right side, we can see the
specific changes that were made to the file. In the top-left corner of
the page, we can still see who made the changes and when they committed
these changes. We can also see that this shows us the version of the
file where the heading hadn't been changed yet. This is how we can look
at what the file looked like at that point in time.

If we want to go back to the list of commits, we can use our browser to
go back to the previous page. For most browsers, this can be achieved by
clicking the left-facing arrow in the top-left corner of the browser.

To see what editing a line within a file looks like, we can click on the
commit message where we edited the heading of the cookie recipe. This
will show us the changes that were made in that commit. The edited line
is shown two times: the old line (in red with a minus in front of it)
and the new line (in green with a plus).

::: callout-note
### Importance of meaningful commit messages

When we explore the history of the repository, it will (hopefully)
highlight the importance of writing meaningful commit messages. Imagine
if all the commit messages were "Update file". Then, it would be quite
cumbersome to find the change we were looking for.

By contrast, if the commits have meaningful messages (like "Add cookie
recipe" or "Move cookie recipe to baked-goods folder"), it is much
easier to get an overview of the changes and locate the one we're
looking for.
:::

::: callout-tip
### History of a specific file

As mentioned above, it's possible to both explore the history of the
entire repository and the history of a specific file. The history of the
entire repository shows all the commits that have been made to all files
in the repository, while the history of a specific file shows the
commits that have been made to that file only.

You can access the history of a specific file by going to the file in
the repository and clicking the "History" button on the top-right side
of the page.
:::

::: callout-tip
### Looking at the entire repository at a specific point in time

It can also be useful to look at the entire repository at a specific
point in time. This can be done by clicking the "Browse files" button on
the top-right side of the page when you've clicked on a specific commit
message. This will show you all files in the repository as they were at
that point in time :alarm_clock:
:::

## Summary

In this session, we have explored how to work with files on GitHub. In
particular, we have:

-   Added files and folders to a GitHub repository
-   Renamed, edited, and moved files in the repository
-   Deleted files and folders from the repository
-   Explored the history of the repository to see the changes that have
    been made and locate specific changes
