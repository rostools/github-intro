# Working with files on GitHub {#sec-working-with-files}

<!-- TODO: Add an introduction here -->

## Learning objectives

The learning objectives of this session are:

{{< include /includes/_working-with-files-objectives.qmd >}}

During the session, you will:

-   Add a cookie recipe and a soup recipe to your repository.
-   Rename and move the recipe files to new folders.
-   Delete the soup recipe and the folder it is in.
-   Look at the history of your repository to find a specific change.

Right now, your repository file structure looks like this:

```         
recipe-book/
TODO: What is in the repo at this point?
```

By the end of the session, your repository file structure will look like
this:

```         
recipe-book/
├── baked-goods/
│   └── chocolate-chip-cookies.md
```

## :book: Reading task: Naming of files and folders

**Time: \~5 minutes.**

Before we start adding files and folders to our repositories, let's take
a moment to talk about good naming practices for files and folders.

When working with files and folders in a repository---and in
general---it's important to think about how you name them. Good naming
practices can help you and others understand the content of a file or
folder and make it easier to find what you are looking for.

Avoiding certain characters can also help prevent issues when working
with files across different operating systems (like Windows, Mac, and
Linux).

Here are some tips for good naming practices:

-   **Use descriptive names**: Choose names that describe the content of
    the file or folder. For example, instead of naming a file
    `file1.md`, name it `data-analysis-results.md`.
-   **Use lowercase letters**: Filenames are case-sensitive on some
    operating systems, so it is a good practice to use lowercase letters
    to avoid confusion.
-   **Use hyphens or underscores**: If you need to separate words in a
    filename, use hyphens (`-`) or underscores (`_`) instead of spaces.
    For example, instead of `data analysis results.md`, use
    `data-analysis-results.md` or `data_analysis_results.md`.
-   **Avoid special characters**: Some special characters, such as `&`,
    `?`, `#`, and the Danish `æ`, `ø`, `å`, can cause issues in
    filenames. It is best to avoid using them. If you work in Danish and
    have a file name with `æ`, `ø`, or `å`, you can use the English
    equivalents (`ae`, `oe`, and `aa`) instead.
-   **Use file extensions**: Use file extensions to indicate the type of
    file. For example, use `.md` for Markdown files, and `.csv` for CSV
    files.

::: callout-note
## What is an `.md` file?

`.md` stands for
[Markdown](https://quarto.org/docs/authoring/markdown-basics.html) and
is a plain text file format (a type of file, like Word's `.docx`) that's
designed to be easy to write and read.

We won't cover how to write Markdown in this workshop. All you need to
know is that we use Markdown files here because it is a common format
for text files.
:::

{{< text_snippet sticky_up >}}

## Add a soup recipe

Now, we'll create our first file on GitHub. Let's add a soup
recipe :bowl_with_spoon:.

In the "Code" tab of the repository, we'll click the button saying "Add file"
in the top-right side of the page. In the dropdown menu, we'll click "Create
new file".

This leads us to a new page with an empty file without any content.

In the "Name your file..." field, in the top-left corner, we'll type the name
of our file. Let's follow the good naming practices we've read about
above and call it `soup.md`.

For the content of the file, we'll copy and paste the following recipe:

``` markdown
Ingredients for tomato soup 

- 4 tbs butter
- 0.5 large onion, cut into large wedges
- 1 can of tomatoes
- 1,5 cups water, vegetable or chicken stock
- 0.5 tsp salt, or more to taste

Instructions

1. Melt the butter over medium heat in a large saucepan.
2. Add onion wedges, water, tomatoes with their juices, and salt.
3. Bring to a simmer and cook for about 40 minutes. Stir occasionally.
4. Blend the soup, and season to taste.
```

Once we have added the file name and the recipe itself, let's save the changes. {{< var github-commit >}}

::: callout-tip
A descriptive message for these changes could be "Add tomato soup recipe"
:::

We've now added our first recipe to the repository! :tada: Now, you'll practice creating files in your repository by adding another
recipe.

## :woman_technologist: Exercise: Add a cookie recipe to your repository

**Time: \~10 minutes**

Now you'll add the second recipe to your repository: A cookie recipe!
:cookie:

1.  In the "Code" tab of your repository, click the "Add file" button
    and then "Create new file".
2.  In the "Name your file..." field, type the name of your file. Let's
    call it `cooke-recipe.md`. Remember to not use spaces in the file
    name as well as the `.md` file extension so you create a
    [Markdown](https://quarto.org/docs/authoring/markdown-basics.html)
    file.
3.  Add a cookie recipe to the file by either finding one online or
    using the example recipe below.
4.  Now, save the changes. {{< var github-commit >}}

::: callout-tip
A descriptive message for these changes could be "Add cookie recipe"
:::

**Example cookie recipe:**

``` markdown
Ingredients for cookies

- 240 grams flour
- 3/4 tsp salt
- 140 grams butter
- 145 grams brown sugar
- 115 grams sugar
- 1 1/2 tsp vanilla powder
- 1 egg
- 1/2 tsp baking soda
- 1 tsp baking powder
- 150 grams chocolate (e.g., a mix of dark and milk chocolate)
- 100 grams chopped hazelnuts (can be omitted or replaced with oats)

Instructions

1. Mix the sugar, brown sugar, and butter well.
2. Add the egg and mix again.
3. Add salt, baking powder, vanilla powder, baking soda, and flour.
4. Add the chopped chocolate and nuts.
5. Form clumps of dough on a baking tray with plenty of space between them.
6. Bake at 175°C (top and bottom heat) for 16.5-17 minutes.
7. Once baked, transfer the baking paper with the cookies onto a wire rack and let them cool for 10 minutes before removing them from the paper.
```

You have now added your second recipe and made another commit to your
repository! :tada:

{{< text_snippet sticky_up >}}

## Rename, edit, and move the soup recipe to a new folder

Now that we have added a couple of recipes to the repository, we'll
take a look at how to rename, edit, and move files in repositories on
GitHub.

Let's imagine that we want to add more recipes to the repository in
the future. To keep things organised, we want our recipes to have
descriptive names and content. We also want to create some folders to
group similar recipes together.

Let's start by doing this with the soup recipe we added earlier.

### Rename `soup.md`

Let's start by renaming the `soup.md` file. We'll go to the `soup.md` file in
the repository by clicking on it in the "Code" tab. Then, we'll click the
pencil icon on the top-right side of the page to edit the file.

On the top-left side of the page, we'll see the name of the file. Let's click
on the name and rename the file to `tomato-soup.md`. Remember to keep
the `.md` file extension.

Once we have renamed the file, let's commit the changes. {{< var github-commit >}}

::: callout-tip
A descriptive commit message for these changes could be "Rename soup recipe to tomato soup"
:::

### Edit the content of `tomato-soup.md`

When we added the content of the file, you might have noticed that it
said "Ingredients for soup" on the first line. This is a bit generic, so
let's change it.

Like before, we'll click the `tomato-soup.md` file in the "Code" tab of the
repository to open it and click the pencil icon on the top-right side of
the page.

Now, let's revise the first line of the file to be "Ingredients for tomato soup".
Once we've made the changes, let's commit them. {{< var github-commit >}}

::: callout-tip
A descriptive commit message for these changes could be "Specify that this is ingredients for a tomato soup".
:::

### Move `tomato-soup.md` to a new `soups/` folder

Next, let's move the `tomato-soup.md` file to a new `soups/` folder.

As before, we'll click the `tomato-soup.md` file to open it and click the
pencil icon on the top-right side of the page.

Now, let's change the path of the file to a new folder in the repository, by
adding `soups/` before the file name like so: `soups/tomato-soup.md`.
Remember to use `/` between the folder name and the file name.

This will create a new folder called `soups/` and then move the
`tomato-soup.md` file into it.

::: callout-tip
## Fixing a folder name after typing slash `/`

You might have noticed that once we add the slash `/` after the folder
name, GitHub moves the cursor to the end of the file path, to the file
name. This might make it seem like we can't go back to the folder name
and correct it if we make a typo or change our mind about the name.

However, we can use the backspace key to remove the `/` which leads
the cursor back to the folder name. Now, we can change the folder name
as we like :partying_face:
:::

{{< var github-commit >}}

::: callout-tip
A descriptive message for these changes could be "Move tomato soup file into the soups folder"
:::

We have now renamed the soup recipe file, edited its content, and moved
it to a new folder in your repository! :bowl_with_spoon: :tomato:

::: callout-note
## Rename, edit, and move files can be done in the same step

It is possible to rename, edit, and move files in the same step if you want to.
However, for practice and clarity in the history, we've split the steps
into first renaming the file *then* moving it to a new folder.
:::

## :technologist: Exercise: Rename, edit, and move the `cookie-recipe.md` file

**Time: \~10 minutes**

Just like we did with the soup recipe above, let's rename the
`cookie-recipe.md` file so the name is more specific. Let's also move it
to a new `baked-goods/` folder. That way, if you want to add other
recipes for baked goods, you can put it in that folder.

While you can rename, edit, and move in the same step, for practice,
rename the file first, then edit the content, and last move it to the
new folder.

Start by renaming the `cookie-recipe.md` file:

1.  Click the pencil icon on the top-right side of the page ("Edit this
    file") to edit the `cookie-recipe.md` file.
2.  Click the name of the file at the top-left of the page and rename
    the file to `chocolate-chip-cookies.md`. Remember to not use spaces
    in the file name and keep the file extension (`.md`).
3.  {{< var github-commit >}} Here, a descriptive message could be "Rename cookie recipe to chocolate chip cookies".

Similarly to the soup recipe, change the first line of the
`chocolate-chip-cookies.md` file:

1.  Click the pencil icon on top-right side of the page ("Edit this
    file") to edit the file.
2.  Edit the first line of the file by adding "chocolate chip", so it
    becomes "Ingredients for chocolate chip cookies".
3.  {{< var github-commit >}} Here, a descriptive message could be "Specify that this is ingredients for chocolate chip cookies".

Next, move the file to a new `baked-goods/` folder:

1.  Click the pencil icon on the top-right side of the page ("Edit this
    file") as we did before on the `chocolate-chip-cookies.md` file.
2.  Click the name of the file at the top-left of the page and change
    the path of the file to a new folder to your repository. The current
    file path is `chocolate-chip-cookies.md`. To create a new folder,
    change the file path by typing `baked-goods/` at the start of the
    file name, so the whole file path
    becomes`baked-goods/chocolate-chip-cookies.md`. Notice the `/`
    between the folder name and the file name.
3.  {{< var github-commit >}} Here, a descriptive message could be "Move cookie recipe to baked-goods folder".

You have now renamed your cookies recipe file and moved it to a new
folder in your repository! :partying_face:

{{< text_snippet sticky_up >}}

## Delete files and folders in a GitHub repository

Let's imagine that we have decided that our recipe book should solely
focus on recipes for sweets, desserts, and baked goods.

This means that we'll want to remove the tomato soup recipe from the
repository along with the `soups/`folder.

To delete the `tomato-soup.md` file and the `soups/` folder, we'll click
the `soups/` folder in the "Code" tab of the repository and then click
the `tomato-soup.md` file within it.

In the top-right corner of the page, we'll click the button with three
dots (`...`), scroll down to the bottom of the dropdown menu and click
"Delete file".

We'll save the changes by committing the changes as we have done before.

Since there was no other files in the `soups/` folder, the folder will
be deleted as well :fire:

We have now deleted the tomato soup recipe and the `soups/` folder from
the repository and are ready to focus on sweets and baked goods! :cake:

::: callout-tip
## Delete a folder with multiple files

If you wanted to delete a folder with multiple files in it along with
the files themselves, you can go to the folder and click the three dots
button (`...`) in the top-right corner of the page. Then, click "Delete
directory" in the dropdown menu.

This will delete the folder and all the files within it, so be careful
with deleting folders directly like this.
:::


## :woman_technologist: Exercise: Find the commit where you added the cookie recipe

**Time: \~10 minutes**

Now that you have made a couple of commits to your repository, take a
look at the history to find the commit where you first added the cookie
recipe.

1.  In your repository, click the "Commits" button on the right side of
    the screen. This will show you all the changes that have been made
    to your repository along with the commit messages, the author of the
    changes, and when the changes where made. Neat!
2.  Go through the list of commits to find the commit where you added
    the cookie recipe. The commit message should be something like "Add cookie recipe".

::: callout-note
Looking at the history shows the importance of meaningful commit
messages. Imagine if all the commit messages were "Update file". Then,
it would be easy to lose track of what changes were made in each commit.

By contrast, if the commits have meaningful messages (like "Add cookie
recipe" or "Move cookie recipe to baked-goods folder"), it is much
easier to get an overview of the changes.
:::

{{< text_snippet sticky_up >}}

::: callout-tip
You can both look at the history of the entire repository or the history
of a specific file. The history of the entire repository shows all the
commits that have been made to all files in the repository, while the
history of a specific file shows the commits that have been made to that
file only.

You can access the history of a specific file by going to the file in
the repository and clicking the "History" button on the right side of
the screen.
:::

## :speech_balloon: Discussion activity: Consider how you'd use GitHub in your work

**Time: \~4 minutes.**

Learning is most effective when there is some connection to what you do
in your daily work life. On your own and based on what we've covered so
far, think about how you might use GitHub in your own work. Then, share
some of your ideas with your neighbour.

1.  Take \~1 minute to think how you might use GitHub in your own work.
2.  Then, pair up with your neighbour and take 3 minutes (1.5 minutes
    each) to share your ideas.

## Summary

In this session, we have explored how to work with files on GitHub. In
particular, we have:

-   Added files and folders to a GitHub repository
-   Renamed, edited, and moved files in the repository
-   Deleted files and folders from the repository
-   Explored the history of the repository to see the changes that have
    been made
