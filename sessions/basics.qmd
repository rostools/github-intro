# The basics of GitHub and Git {#sec-basics}

<!-- TODO: Add an introduction here -->

## Learning objectives

The overall learning outcome for this session is to:

1.  

Specific learning objectives are:

{{< include /includes/_basics-objectives.qmd >}}

## :speech_balloon: Discussion activity: Recall what you read during the pre-workshop tasks

**Time: \~5 Minutes**

Before we start the workshop, we'll take some time to "prime" your
memory and activate your prior learning of what you read during the
pre-workshop tasks. Then after this activity, you'll again read the
description of Git and GitHub from pre-workshop tasks. We do this
because effective learning is about retrieval, repetition, and actively
engaging in the material. So:

1.  For 1 minute, recall what you understood about Git and GitHub from
    the pre-workshop tasks. Think about how you'd explain it to someone
    else.
2.  For 4 minutes, pair up with your neighbour and take turns explaining
    to them what you remember, 2 minutes each.

## :book: Reading task: What is version control and Git?

::: {.callout-note collapse="true"}
## :teacher: Instructor note

After they've read it, take some time to repeat some key points from the
text, such as:

-   Emphasising how people usually version files.
-   Highlighting that Git can track any file type, but that Git has more
    features for text-based files.
-   Reinforcing what "plain text" files are.
:::

**Time: \~5 minutes.**

::: callout-note
This is the same text you read for the pre-workshop tasks. Why are we
getting you to do a discussion activity to remember Git, then getting
you to again re-read the text? We're doing this because we know that
learning and understanding Git can be *very hard*, so we're giving you
repeated exposures to it. Git requires you work with files in a
fundamentally different way than people usually work, so we've learned to give learners lots of opportunities
to try to understand what Git does and why it is useful. By including these repeated exposures we want to help reinforce these concepts.
:::

{{< include /includes/_git-basics.qmd >}}

{{< text_snippet sticky_up >}}

## :book: Reading task: What is a file path?

**Time: \~3 minutes.**

Operating systems like Windows and MacOS try really hard to make the
filesystem, and ultimately file paths, hidden or obscured from the user.
This has some benefits, but lots of downsides. Computers and their
programs depend on file paths, so by hiding them from the user, they
don't learn what they are and how to use them effectively. So as soon as
a user needs to do even a bit deeper computer work, they encounter file
paths and need to know how they work. This is especially true for Git and
GitHub.

So to make sure we're all on the same page, we'll briefly describe what
file paths are and why they're important to know about.

In simple terms, a **path** is the location of a file or folder in a
filesystem. The end of a path is either a folder or a file and indicated
by either a `/` or an extension like `.txt` or `.docx`. All items in the
path before the last item are folders. For example:

-   `/Users/username/Documents/` is a path to the `Documents` folder,
    within the `username` folder, which is then within the `Users`
    folder.
-   `/Users/username/Documents/notes.txt` is a path to the `notes.txt`
    file, within the `Documents` folder, which is within the `username`
    folder, and that finally is in the `Users` folder.

When you make files for work, it's best to organise files and folders
based on the project you are working on, so that things are easy to find
and kept together. This is especially important when using tools like
Git and GitHub. That's because tools like Git and GitHub work *within* a
specific folder and treat that *specific* folder as a Git repository.
Then, all files within that repository (folder) are relative to one
another. This "relativeness" also is shown by two "special characters":

-   `..`: Two dots mean the folder up one, also called the "parent folder". If you open the folder `username/`
    in the file path `/Users/username/`, the `../` is the `/Users/` folder, since it
    is one folder up from `username`.
-   `.`: One dot means the current folder. If you open up the folder `/Users/username/` 
    and see `./Documents/` that means to add `Documents/` to the end of the
    file path, which would be `/Users/username/Documents/`.

We'll be working with and navigating the file path on GitHub throughout
this workshop, you will get more exposure to it as we go along.

{{< text_snippet sticky_up >}}

## :speech_balloon: Discussion activity: Explain the basics of Git

**Time: \~4 minutes.**

Learning is about recalling and explaining something in your own words.
And since Git is such a fundamentally different way of working with and
thinking about files, this discussion activity aims to help solidify
what we've covered so far about Git. So:

1.  Take \~1 minute to silently explain to yourself what you understood
    the basics of Git are.
2.  Pair up with your neighbour and for the next 3 minutes, take turns
    (1.5 minutes each) explaining to each other what you understand
    about the basics of Git. Try to come to a shared understanding of
    what it is, how to work with it, and how it's different from other
    ways of working with files.

## Summary

-   TODO: List of summary items
