# The basics of Git and GitHub {#sec-basics}

<!-- TODO: Add an introduction here -->

## Learning objectives

The learning objectives of this session are to:

{{< include /includes/objectives/_basics.qmd >}}

## :speech_balloon: Discussion activity: Recall what you read during the pre-workshop tasks

**Time: \~5 Minutes**

Before we start the more practical part of the workshop, we'll take some
time to refresh your memory on what you read about Git and GitHub in the
pre-workshop tasks. So:

1.  For 1 minute, recall what you understood about Git and GitHub from
    the pre-workshop tasks. Think about how you'd explain it to someone
    else.
2.  For 4 minutes, pair up with your neighbour and take turns explaining
    to them what you remember, 2 minutes each.

## :book: Reading task: What is version control and Git?

::: {.callout-note collapse="true"}
## :teacher: Teacher note

After they've read it, take some time to repeat some key points from the
text, such as:

-   Emphasising how people usually version files.
-   Highlighting that Git can track any file type, but that Git has more
    features for text-based files.
-   Reinforcing what "plain text" files are.
:::

**Time: \~5 minutes.**

::: callout-note
The text below is the same text you read for the pre-workshop tasks.

So, **why are we asking you to discuss it and then read it again?**

Because Git is *hard* to learn. It requires changing how you think about
working with files, which often takes time to adjust to. By revisiting
the material through reading, discussion, and rereading we want to help
you build familiarity with these concepts before moving on to the
hands-on parts of the workshop.
:::

{{< include /includes/_git-basics.qmd >}}

{{< text_snippet sticky_up >}}

## What is GitHub?

::: {.callout-note collapse="true"}
## :teacher: Teacher note

Verbally explain the differences between Git and GitHub, briefly go over
the diagram but reinforce that we won't cover that in this workshop.
Then, highlight some simple differences between tools like OneDrive and
GitHub.
:::

{{< include /includes/_github-basics.qmd >}}

Now that you know that you use Git and GitHub to work with files, this
is the perfect time to go over what file paths are! :tada:

## :book: Reading task: What is a file path?

::: {.callout-note collapse="true"}
## :teacher: Teacher note

Reinforce that:

-   Paths are pointers to files on your computer
-   They are for us humans to effectively organise and work with files
-   Every file has a parent folder, and every folder may also have a
    parent folder
-   Files and folders are separated by `/` or `\` and that the last item
    in the path is either a file or a folder.
:::

**Time: \~3 minutes.**

Operating systems like Windows and MacOS try really hard to make the
filesystem, and ultimately file paths, hidden or obscured from the user.
This has some benefits, but also some downsides. Computers and their
programs depend on file paths, so by hiding them from the user, they
don't learn what they are and how to use them effectively. So as soon as
a user needs to do even a bit deeper computer work, they encounter file
paths and need to know how they work. This is especially true for Git
and GitHub.

So to make sure we're all on the same page, we'll briefly describe what
file paths are, and why they're important to know about.

In simple terms, a **path** is the location of a file or folder in a
filesystem. The end of a path is either a folder or a file and indicated
by either a `/` or an extension like `.txt` or `.docx`. All items in the
path before the last item are folders. For example:

-   `/Users/username/Documents/` is a path to the `Documents` folder,
    within the `username` folder, which is then within the `Users`
    folder.
-   `/Users/username/Documents/notes.txt` is a path to the `notes.txt`
    file, within the `Documents` folder, which is within the `username`
    folder, and that finally is in the `Users` folder.

When you make files for work, it's best to organise files and folders
based on the project you are working on, so that things are easy to find
and kept together. This is especially important when using tools like
Git and GitHub. That's because tools like Git and GitHub work *within* a
specific folder and treat that *specific* folder as a Git repository.
Then, all files within that repository (folder) are relative to one
another. This "relativeness" is also shown by two "special characters":

-   `..`: Two dots mean the folder up one, also called the "parent
    folder". In the file path `/Users/username/`, the `../` is the
    `/Users/` folder, since it is one folder up from `username/`.
-   `.`: One dot means the current folder. If you're in the folder
    `/Users/username/` and see `./Documents/`, it means the `Documents/`
    folder within the `username/` folder, like so:
    `/Users/username/Documents/`.

We'll be working with and navigating the file path on GitHub throughout
this workshop, so you will get more exposure to it as we go along.

{{< text_snippet sticky_up >}}

## :speech_balloon: Discussion activity: Explain the basics of Git and GitHub

**Time: \~4.5 minutes.**

Learning is about recalling and explaining something in your own words.
And since Git is such a fundamentally different way of working with and
thinking about files, this discussion activity aims to help solidify
what we've covered so far about Git and GitHub. So:

1.  Take \~30 seconds to silently explain to yourself what you
    understood the basics of Git and GitHub are.
2.  Pair up with your neighbour and for the next 4 minutes, take turns
    (4 minutes each) explaining to each other what you understand about
    the basics of Git and GitHub, and how file paths relate to them. Try
    to come to a shared understanding of what it is, how to work with
    it, and how it's different from other ways of working with files.

## Summary

-   Git is a version control software that tracks changes to files in a
    repository. It allows you to see what changes were made, who made
    them, when they were made, and why they were made.
-   A Git repository is a folder that contains all the files and
    sub-folders for a project.
-   GitHub is a company and website that hosts Git repositories and adds
    tools to help you work with files in a repository.
-   File paths are the location of a file or folder in a filesystem.
-   Each change to a file in a repository creates a new commit in the
    Git history log, each with its own commit message (when working on
    GitHub).
-   Commits are connected to each other creating the history of changes
    made within a repository.
