# The basics of Git and GitHub {#sec-basics}

<!-- TODO: Add an introduction here -->

## Learning objectives

The learning objectives of this session are to:

{{< include /includes/objectives/_basics.qmd >}}

## :speech_balloon: Discussion activity: Recall what you read during the pre-workshop tasks

**Time: \~5 Minutes**

Before we start the more practical part of the workshop, we'll take some
time to refresh your memory on what you read about Git and GitHub in the
pre-workshop tasks. So:

1.  For 1 minute, recall what you understood about Git and GitHub from
    the pre-workshop tasks. Think about how you'd explain it to someone
    else.
2.  For 4 minutes, pair up with your neighbour and take turns explaining
    to them what you remember, 2 minutes each.

## :book: Reading task: What is version control and Git?

::: {.callout-note collapse="true"}
## :teacher: Teacher note

After they've read it, take some time to repeat some key points from the
text, such as:

-   Emphasising how people usually version files.
-   Highlighting that Git can track any file type, but that Git has more
    features for text-based files.
-   Reinforcing what "plain text" files are.
:::

**Time: \~5 minutes.**

::: callout-note
This is the same text you read for the pre-workshop tasks. Why are we
getting you to do a discussion activity, then getting you to again
re-read the text? We're doing this because we know that learning and
understanding Git can be *very hard*, so we're giving you repeated
exposures to it, by both getting you to retrieve, discuss, and reread
it. Git requires you work with files in a fundamentally different way
than people usually work, so we want to give you multiple exposures
to what Git does before moving into the practical parts of this workshop. By
including this repetition we aim to reinforce these new concepts.
:::

{{< include /includes/_git-basics.qmd >}}

{{< text_snippet sticky_up >}}

## What is GitHub?

::: {.callout-note collapse="true"}
## :teacher: Teacher note

Verbally explain the differences between Git and GitHub, briefly go over
the diagram but reinforce that we won't cover that in this workshop.
Then, highlight some simple differences between tools like OneDrive and
GitHub.
:::

{{< include /includes/_github-basics.qmd >}}

## GitHub's landing page

::: {.callout-note collapse="true"}
## :teacher: Teacher note

During this section, visually show and walk through the different parts
of the landing page. You don't need to go into the pages just yet
though.
:::

Now that we've covered some of the basics of what Git and GitHub are,
let's do some practical activities on GitHub. First, we'll start by
looking at GitHub's landing page. This is the page you see when you
first log in to GitHub. It shows you a summary of what's happening in
your GitHub account as well as quick links to common items. For this
workshop, we will only focus on these items:

-   **Top repositories** list and search bar at the top of the left
    sidebar. Since you are new to GitHub, you likely won't have any (or
    only a few) repositories listed here. When you start to work with
    more repositories, this is a quick way to access them.
-   **Create new...** button on the navigation bar on the top right that
    looks like: {{< fa plus >}} {{< fa caret-down >}}. This is where you
    can create a new repository, as well as other items we won't cover
    in this workshop.
-   **Issues** button on the navigation bar on the top right that looks
    like: {{< var issues-icon >}}. This is where you can view all issues
    you've made, participate in, or have been assigned to. From our
    experience, we don't use this item often, but it can be useful to
    quickly find or search for issues related to your work.
-   **Notifications inbox** button on navigation bar on the top right
    that looks like: {{< var inbox-icon >}}. This is where you can see
    all notifications about activities in your repositories, like when
    someone comments on an issue you made or mentions you in an issue.

We'll return to these items later in the workshop, but for now, it's
enough for you to know where they are. Letâ€™s go to the next section and
create a new repository :rocket:

## Creating a new repository

::: {.callout-note collapse="true"}
## :teacher: Teacher note

Take it slow here as you create the repository since this is the first
"type-along" of the workshop. Make sure to explain each option and what
it does, using the table below as a guide.

Also briefly introduce Markdown and mention the `.md` file extension.
:::

Now that we've gone over the landing page of GitHub and taken a look at
some commonly used areas of GitHub, let's create a new repository on
GitHub. This is where we will store all the files and folders for the
project we will be working on in this workshop.

For this workshop, we'll create a repository for a recipe project that
will contain files with recipes :yum: :cake: :pizza: :stew:

1.  Click on the **Create new...** button {{< fa plus >}}
    {{< fa caret-down >}} on the top right side of the navigation bar.
2.  Click on the **New repository** option in the dropdown menu.
3.  A new page will open up that now shows a list of options to check
    and text boxes to fill in. @tbl-new-repo-options describes what each
    option is and what to set it as for this workshop.

| Option | Description | Workshop Setting |
|:------------------|:---------------------------------|:------------------|
| Repository owner | This is the account you are creating the repository under. If you are part of an organisation, you can also create new repositories there. | Leave it as your own personal account. |
| Repository name | This is the name of the repository or project. | Name it `recipes`. |
| Description | This is a short description of what the repository is for and what it will contain. | Write "This is a practice repository for an introductory GitHub workshop. It includes a few recipes.". |
| Public or Private | This is whether the repository is visible to everyone (public) or only to you and people you give access to (private). | Leave it as public. |
| Add a README file | This is a file that is shown on the front page of the repository. It is a good place to put information about the repository. When checked, it will say something about "set main as default branch". You can safely ignore this message. | Make sure it is checked. |
| Add .gitignore | This is a file that tells Git to ignore certain files or folders. | Leave it unchecked. |
| Choose a license | This is a file that tells others how they can use the files in the repository. | Leave it unchecked. |

: List of options available to set when creating a new repository on
GitHub. {#tbl-new-repo-options}

It's now time to click the **Create repository** button at the bottom of
the page. After you click the button, you'll be taken to the front page
of the repository. This is where you can see all the files and folders
that are currently in this repository.

In this new repository there is only one file: `README.md`. The
`README.md` file is a common file included in repositories to describe
what the repository contains and is used for.

The files that have the file extension `.md` (like this `README.md` file)
are Markdown files.
[Markdown](https://quarto.org/docs/authoring/markdown-basics.html) is a
plain text file format (a type of file, like Word's `.docx`) that's
designed to be easy to write and read. Markdown files are commonly used
to write text documents. We won't cover how to write Markdown in this
workshop, we'll only use them.

We will start to add and modify files in the repository in the next
session. For now, this is the perfect time to talk about something that
is fundamental to working with files and folders: file paths.

## :book: Reading task: What is a file path?

::: {.callout-note collapse="true"}
## :teacher: Teacher note

Reinforce that:

-   Paths are pointers to files on your computer
-   They are for us humans to effectively organise and work with files
-   Every file has a parent folder, and every folder may also have a
    parent folder
-   Files and folders are separated by `/` or `\` and that the last item
    in the path is either a file or a folder.
:::

**Time: \~3 minutes.**

Operating systems like Windows and MacOS try really hard to make the
filesystem, and ultimately file paths, hidden or obscured from the user.
This has some benefits, but also some downsides. Computers and their
programs depend on file paths, so by hiding them from the user, they
don't learn what they are and how to use them effectively. So as soon as
a user needs to do even a bit deeper computer work, they encounter file
paths and need to know how they work. This is especially true for Git
and GitHub.

So to make sure we're all on the same page, we'll briefly describe what
file paths are, and why they're important to know about.

In simple terms, a **path** is the location of a file or folder in a
filesystem. The end of a path is either a folder or a file and indicated
by either a `/` or an extension like `.txt` or `.docx`. All items in the
path before the last item are folders. For example:

-   `/Users/username/Documents/` is a path to the `Documents` folder,
    within the `username` folder, which is then within the `Users`
    folder.
-   `/Users/username/Documents/notes.txt` is a path to the `notes.txt`
    file, within the `Documents` folder, which is within the `username`
    folder, and that finally is in the `Users` folder.

When you make files for work, it's best to organise files and folders
based on the project you are working on, so that things are easy to find
and kept together. This is especially important when using tools like
Git and GitHub. That's because tools like Git and GitHub work *within* a
specific folder and treat that *specific* folder as a Git repository.
Then, all files within that repository (folder) are relative to one
another. This "relativeness" is also shown by two "special characters":

-   `..`: Two dots mean the folder up one, also called the "parent
    folder". In the file path `/Users/username/`, the `../` is the
    `/Users/` folder, since it is one folder up from `username/`.
-   `.`: One dot means the current folder. If you're in the folder
    `/Users/username/` and see `./Documents/`, it means the `Documents/`
    folder within the `username/` folder, like so:
    `/Users/username/Documents/`.

We'll be working with and navigating the file path on GitHub throughout
this workshop, so you will get more exposure to it as we go along.

{{< text_snippet sticky_up >}}

## A visual walkthrough of working with files on GitHub

::: {.callout-note collapse="true"}
## :teacher: Teacher note

Show this diagram and explain it to the learners, as well as the state
of the files in the repository at each step.
:::

Before we get into hands-on work with files on GitHub in the next
session, we'll briefly do a walkthrough of what happens when you add or
modify files stored in a Git repository. In @fig-git-commits, we have a
hypothetical series of commits (i.e., actions or changes) done in a Git
repository. Each commit is shown as a "circle" or "dot" on a line that
forms the Git history. The messages beside each commit are the commit
message describing what the commit is about.

As we make changes to files or folders in the repository another commit
is created.

The name "main" in the diagram is the default name of the "branch" that
contains the saved commits in the Git history log. We won't cover
branches in this workshop.

```{mermaid}
%%| label: fig-git-commits
%%| fig-cap: "Each step creates a new commit in the history log of the Git repository on GitHub."
%%| fig-alt: "A diagram showing a series of commits in a Git repository, with text describing the step corresponding to the commit that is expanded on below the diagram."
%%{init: {'themeVariables': {
  'git0': '#ba8b00',
  'commitLabelBackground': '#ffffff',
  'commitLabelFontSize': '16px'
  }, 'gitGraph': {'rotateCommitLabel': false}}
}%%
gitGraph TB:
  checkout main
  commit id: "1. Create repo with README: 'README.md'"
  commit id: "2. Add a new recipe: 'toup.md'"
  commit id: "3. Fix a typo: 'soup.md'"
  commit id: "4. Move file to new folder: 'soups/tomato.md'"
  commit id: "5. Add a new recipe file and folder: 'baked-goods/cookies.md'"
```

When we look at the files that exist in the repository with each new
commit, they look like:

1.  Create repo with README: 'README.md'

    ```
    recipes/
    â””â”€â”€ README.md
    ```

2.  Add a new recipe file: 'toup.md'

    ```
    recipes/
    â”œâ”€â”€ README.md
    â””â”€â”€ toup.md <- new file
    ```

3.  Fix a typo: 'soup.md'

    ```
    recipes/
    â”œâ”€â”€ README.md
    â””â”€â”€ soup.md <- typo fix
    ```

4.  Move file to new folder: 'soups/tomato.md'

    ```
    recipes/
    â”œâ”€â”€ README.md
    â””â”€â”€ soup/ <- new folder
        â””â”€â”€ tomato.md <- moved file
    ```

5.  Add a new recipe file: 'baked-goods/cookies.md'

    ```
    recipes/
    â”œâ”€â”€ README.md
    â”œâ”€â”€ soup/
    â”‚   â””â”€â”€ tomato.md
    â””â”€â”€ baked-goods/ <- new folder
        â””â”€â”€ cookies.md <- new file
    ```

Because the Git history consists of these connected commits that each
contain changes, we're able to see exactly what was changed. You can
even go back to the state of the folder or file and see the exact
contents that existed at that point in time.

Why is this important and useful? Because we humans have imperfect
memories, so having it recorded in a history log makes it much easier to
recall what you or your collaborators were doing at a specific point in
time as well as when a specific change was added and why.

## :speech_balloon: Discussion activity: Explain the basics of Git and GitHub

**Time: \~4 minutes.**

Learning is about recalling and explaining something in your own words.
And since Git is such a fundamentally different way of working with and
thinking about files, this discussion activity aims to help solidify
what we've covered so far about Git and GitHub. So:

1.  Take \~1 minute to silently explain to yourself what you understood
    the basics of Git and GitHub are.
2.  Pair up with your neighbour and for the next 3 minutes, take turns
    (1.5 minutes each) explaining to each other what you understand
    about the basics of Git and GitHub. Try to come to a shared
    understanding of what it is, how to work with it, and how it's
    different from other ways of working with files.

## Summary

-   Git is a version control software that tracks changes to files in a
    repository. It allows you to see what changes were made, who made
    them, when they were made, and why they were made.
-   A Git repository is a folder that contains all the files and
    sub-folders for a project.
-   GitHub is a company and website that hosts Git repositories and adds
    tools to help you work with files in a repository.
-   GitHub's landing page as well as its navigation bar has several
    quick links to commonly used areas of GitHub (such as the "Create
    new" button, notifications inbox and issues)
-   File paths are the location of a file or folder in a filesystem.
-   Each change to a file in a repository creates a new commit in the
    Git history log, each with its own commit message (when working on
    GitHub).
-   Commits are connected to each other creating the history of changes
    made within a repository.
