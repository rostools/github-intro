# Creating and using GitHub Issues {#sec-using-issues}

## Learning objectives

The learning objectives of this session are to:

{{< include /includes/objectives/_using-issues.qmd >}}

During the session, you will:

-   Create your first GitHub Issue.
-   Comment on an issue in your neighbour's repository to discuss which
    recipes to add to your recipe books.

In this session, we will not add files to or edit files in the
repository. Instead, we will focus on creating and using GitHub Issues
to keep track of tasks and discussions in your project.

## :book: Reading task: What are GitHub Issues?

**Time: \~7 minutes.**

So far, we've covered how to create repositories, add files and folders,
and make changes to files. We've mentioned that GitHub can do much more
than that. For example, GitHub can help you keep track of tasks within
your project. These tasks could be ideas for future work, or a
discussion item you want to discuss with your collaborators before you
add it to your repository. This is where GitHub Issues come in.

[GitHub Issues](https://docs.github.com/en/issues) are "items" or
"records" that can help you keep track of to-do tasks and discussions
related to a repository. Issues are not files in your repository; they
are completely separate from the repository's files and folders which we
have been working with so far in the "Code" tab on GitHub. Instead,
issues live in the "Issues" tab in your GitHub repository. Later in this
session, we'll create multiple issues, so you don't have to go to this
tab right now. For now, it's enough to know that issues aren't files in
your repository, but a separate tool for keeping track of tasks and
ideas.

Issues can be used in many ways. For example, you can use them to:

-   Keep track of tasks you need to do.
-   Discuss ideas with your collaborators.
-   Report problems, bugs, or mistakes.
-   Plan future work.
-   Ask questions or request help from collaborators.

Issues can be assigned to specific people. By assigning an issue to
someone, it becomes clear who is responsible for completing the task
referenced in the issue. Another useful feature is that you can tag
people in comments to notify them of the task or discussion. You tag
people by typing `@` followed by the person's username. Depending on the
person's notification settings, they will receive an email and/or a
notification on GitHub when they get tagged.

Once you have created an issue, you can add comments to it, discuss the
task with your collaborators, and close the issue once the task is
completed. This way, you can keep track of what needs to be done and
what has already been completed.

Anyone with access to the repository can create an issue. This means
that you can create issues in your own repository, in a repository where
you are a collaborator, and in public repositories in general. This can
be very useful if you, for instance, want to suggest a change or report
a problem in another person's repository.

All issues in the repository are available in the "Issues" tab, where
you can see a list of all the issues in the repository. You can also
filter the issues by their status, such as "open" or "closed", and by
who they are assigned to or authored by. By default, only open issues
are shown.

Now that you've read about what GitHub Issues are, let's practice
creating issues in the repository.

::: callout-note
## Using issues for project management

Issues are the main tool for managing projects on GitHub. With [GitHub
Projects](https://docs.github.com/en/issues/planning-and-tracking-with-projects/about-projects),
you can create a Kanban board to keep track of your issues and tasks. We
don't have the time to cover that in this workshop, but we'll start with
the basics of issues, then you can explore GitHub Projects on your own
if you're interested in using GitHub for project management.
:::

{{< text_snippet sticky_up >}}

## Creating a GitHub Issue

Since we've decided that our recipe book should only include recipes for
sweets and baked goods, we might want to add a new folder for sweets in
the future, such as recipes for chocolate-covered strawberries or
chocolate mousse. Let's create an issue to keep track of this task.

In the repository, we'll click on the "Issues" tab. On this page, we'll
see a list of the open issues in our repository. Since we (or someone
else) haven't added an issue yet, this list is empty. We will create a
new issue by clicking the "New issue" button in the top-right side of
the page. Let's give the issue the title "Add a folder for sweets" and
write that we want to add a new folder for sweets in the description.
Since this is a very simple task, the description doesn't add much new
information, but it's good practice to write a description that explains
the task in more detail.

We can also assign someone to the issue so it is visible that they are
responsible for completing this task. Since we don't have any
collaborators on our `recipes` repository, let's assign it to ourselves.
We do this by going to the "Assignees" section on the right side of the
page and clicking on our username.

Finally, let's click the "Create issue" button in the bottom right side
of the page to create the issue.

Once we've created the issue, when we click the "Issues" tab we'll see
the new issue in the list of the repository's issues. When we click on
the issue, we can see the description and potential comments to the
issue. We can also close the issue once the task is completed.

We have now created our first issue :tada:!

::: callout-tip
### Issue overview

If you want to see get an overview of the issues in a specific
repository, you can go to the "Issues" tab in that repository.

But if you want to see all the issues you have created across
repositories, you can click the "Your issues" button in the top-right
corner of the GitHub page. It looks like this: {{< var issues-icon >}}.

When you click that, you'll see a list with all the issues you have
created across all repositories. Nice! :sparkles:
:::

## :technologist: Exercise: Create an issue to discuss future recipes

**Time: \~10 minutes**

Imagine that you would like to discuss or brainstorm some ideas on what
recipes to add to your recipe book next. Since GitHub Issues can be used
for exactly that purpose, it makes sense to create one to keep track of
these ideas:

1.  In your repository, click the "Issues" tab, and then the "New issue"
    button.

2.  Fill in the title with text like "What recipes to add next?". Then
    fill in the description box with some recipes you might want to add
    in the future. If you don't know any recipes or are not sure, you
    could write something like:

    ``` markdown
    In the future I want to add more recipes to this project, but I'm not
    entirely sure what to add yet. I'm open to suggestions!

    Maybe, it could be:

    -   Chocolate mousse
    -   Chocolate-covered strawberries
    -   Apple pie
    ```

3.  To inform the person you would like to get suggestions from, you can
    tag them in the issue. To do this, type `@` followed by the username
    of the person you want to tag. For example, if you want to tag
    someone with the user name `signekb`, you would type `@signekb`. Ask
    your neighbour for their GitHub username and tag them in the issue.
    You could write: "Hey \@\[neighbour's GitHub username\], what do you
    think about the recipes I've listed here? Do you have any other
    suggestions?"

4.  When you have added a title and description to the issue as well as
    tagged your neighbour in it, click the "Create" button to create it.

You now have an issue to remind yourself of recipes you want to add, and
started a potential discussion by tagging your neighbour and asking for
suggestions! :cake:

{{< text_snippet sticky_up >}}

## GitHub notifications

::: {.callout-note collapse="true"}
## :teacher: Teacher note

Slowly walkthrough the inbox section, as it can be a lot to take in at
once.
:::

Now that you've been tagged in your neighbour's issue, you will have
received a notification on GitHub (and maybe also an email depending on
your [notification settings](#sec-managing-emails)).

To see the notification, we'll click on the inbox button in the top
right corner of the GitHub page that looks like this:
{{< var inbox-icon >}}. This will show a list of your notifications,
including the one from your neighbour's issue.

Let's take a moment to look at the information in this notification. We
can see the title of the issue, who created it, and the repository it's
in. We can also see that we've been mentioned in this issue.

If we click on the notification, it will take us to the issue page. Here
we can see the issue with all its details.

Since you've been tagged in your neighbour's issue, you should be able
to find the issue fairly quickly in your notifications inbox. However,
if you hadn't been tagged, you can't find the issue this way. So, let's
practice finding the issue in your neighbour's repository without using
the notifications inbox.

## :woman_technologist: Exercise: Comment on your neighbour's issue with a recipe suggestion

**Time: \~10 minutes**

One of the great things about GitHub is that it makes it easier to
collaborate with others. So, interact with someone else's issue by
adding a comment to it:

1.  With your neighbour one at a time, go to each other's GitHub
    repository. You can search for their username in the GitHub search
    bar in the top navigation bar.
2.  Once you've found their `recipes` repository, go to the "Issues" tab
    in the repository.
3.  Click on the issue that they have created with the list of future
    recipes.
4.  Scroll down to the bottom of the page and write a comment in the
    comment field suggesting a recipe that they could add to their
    recipe book. For example, you could suggest that they add a brownie
    recipe as well :cake: If you want to, you can also tag your
    neighbour in the comment by typing `@` followed by their username.
5.  When you have written your comment, click the green "Comment" button
    to post the comment.

::: callout-tip
### Edit your issue or your comment

If you want to edit your issue or your comment to an issue, you can do
so by clicking the {{< var ellipsis-icon >}} button on the right side of
the issue or comment. This will open a dropdown menu. Click "Edit" in
the dropdown. From here you can change the title, description, or
comment text.

Once you have made your changes, click the "Save" button for issues or
"Update comment" for comments to save the changes.
:::

{{< text_snippet sticky_up >}}

## :speech_balloon: Discussion activity: Consider the advantages of issues in your own work

**Time: \~4 minutes.**

To connect what we've learned to your own daily work, consider what
advantages (and barriers) there are to using issues in your own work.

1.  Take \~1 minute to think how you would integrate issues into your
    work and what advantages and challenges there may be.
2.  Pair up with your neighbour, and take 1.5 minutes each to share what
    you've thought about.

## Summary

In this session, we have learned about GitHub Issues. Specifically, we
have:

-   Created our first issues: One to keep track of a future task (adding
    the `sweets/` folder) and one to start brainstorming ideas on which
    recipes to add in the future.
-   Explored GitHub notifications.
-   Navigated Github to find other people's repositories and issues.
-   Started collaborating a bit by commenting on someone else's issue to
    suggest a recipe.
