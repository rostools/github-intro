# Version control with Git and GitHub {#sec-git-and-github}

This reading is meant as a primer to the workshop. It will introduce you
to the concepts of *version control*, *Git*, and *GitHub* which are
central concepts of the workshop.

## What is version control? {#sec-what-is-version-control}

Within academic and research contexts, most people's work usually
involves some interacting with or changing files in one way or another.
These files can be anything from text documents to images to code. When
we change files, it can be useful to track what was changed and when it
was changed. This tracking of changes to files is known as *version
control*.

Version control can very useful for many reasons. Especially, when you
are collaborating with others on a project since version control allows
everyone to track who and what was changed in the files you collaborate
on.

But version control is also useful when you are working mostly alone on
a project, as we humans tend to forget things. For instance, you may
wonder why you made a certain change or want to revert back to an
earlier version of your file. Version control can help you with this by
enabling you to see what was changed in your file and when (called the
"history" of your file) and to view earlier versions of your files.

You may have used a file's internal "track changes" features, like in
Word, or maybe you have informally "tracked changes" on the file level
by saving multiple versions of a file with different names, like in the
example image below.

![File naming in a commonly used informal "version
control".](/images/informal-version-control.jpg){#fig-informal-version-control
fig-alt="A screenshot of a file explorer showing multiple versions of
different files with names like "draft.txt", "draft1.txt", and
"draft_final.txt"."}

Does the above image look familiar? While it may exaggerate what some
people's "versioning" looks like, it is the most common approach people
use to "version control" their files.

This "informal" way to do version control isn't ideal because it
involves multiple copies of the same file; it makes it difficult to keep
track of specific changes and find the right version of the files.
Having multiple versions of the same file with slight modifications
under different names, as in the image above, really highlights that it
is hard to manually track file changes and that there is a need for more
formal version control.

Luckily for us, there are "formal" version control systems that
automatically track changes to files. So, let's take a look at one such
system: Git.

## What is Git? {#sec-what-is-git}

{{< include /includes/_git-basics.qmd >}}

To understand how powerful formal version control like Git is, consider
these questions:

-   How many different versions of a scientific document or thesis do
    you have lying around after getting feedback from your supervisor or
    co-authors?
-   Have you ever wanted to test out something in a file and ended up
    creating a new one to avoid modifying the original?
-   Have you ever deleted something and wished you hadn't?

All these problems can be fixed by using formal version control! Besides
this, there are many good reasons to use version control, especially in
science. Version control helps with:

-   Keeping your files and folders more organised, since you only need
    one version of each file.
-   Easier collaboration, because you can collaborate on a single
    file/folder in a single central location.
-   Complete transparency of who did what and when, which can protect
    against accusations of fraud or misconduct.
-   Claim to first discovery, since you have a time-stamped history of
    your work.
-   Easing the process of sharing your work with others, since you can
    share the repository with them.

## What is GitHub then? {#sec-what-is-git-and-github}

{{< include /includes/_github-basics.qmd >}}

## Why learn and use GitHub specifically? {#sec-why-github}

When you're learning something new, it helps to put it into a context.
While we've already covered some of this in the
[syllabus](/overview/syllabus.qmd), we haven't fully addressed probably
one of the biggest questions you may have: Why GitHub?

GitHub is an extremely popular and widely used online platform for
managing Git repositories. As you read previously, Git repositories come
with a lot of features to work with files and track changes to them.
GitHub does much more than that. It can be used for:

-   [project
    management](https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)[^git-and-github-1]
-   running automatic [workflows](https://docs.github.com/en/actions)
-   hosting [websites](https://docs.github.com/en/pages)
-   [collaborating](https://docs.github.com/en/get-started/using-github/github-flow)
    with others, for example by providing a
    [framework](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request)
    for reviewing each other's work

[^git-and-github-1]: The links in this and other sections are included
    so you know where to go for more information, but are not required
    reading for this workshop.

GitHub also allows you to create tasks or notes (known as [GitHub
Issues](https://github.com/features/issues)) that are connected to your
repository. We'll create our own GitHub Issues later in this workshop.

While there are other platforms that do similar things, such as
[GitLab](https://gitlab.com/) and [Bitbucket](https://bitbucket.org/),
GitHub is more widely used than the others and has a much larger
community. So, you will be able to find many different resources, tools,
and projects on GitHub that you can use and learn from.

More and more researchers use GitHub to conduct their research,
collaborate, and share their work. It is a powerful platform that not
only facilitates collaboration but also makes your research more
discoverable, since GitHub is extensively indexed by search engines and
has its own search. Overall, itâ€™s an excellent way to make your research
more [open and accessible](https://en.wikipedia.org/wiki/Open_research).

In order to remain relevant and connected to the current and future
research community, we need to embrace and use tools that improve how we
do our work and how we disseminate our research. And GitHub is one of
these tools.

In that context, this workshop is designed as a gentle introduction to
using GitHub to manage your files related to your research and work.
Before diving into some of the more advanced uses, it's important to
learn about and try out the basics of Git and GitHub works and how to
use it effectively. In this workshop, our focus is to cover the most
fundamental and important features of GitHub that will help you get
started with using it for your own work.

## Summary of Git and GitHub

-   Using a *formal version control* system like Git can help you keep
    track of changes to your files and projects.
-   A Git *repository* is a place where you store all the files for your
    project along with their history.
-   GitHub is a website that hosts Git repositories, allowing you to
    store and share your files and projects online.
-   Through GitHub you can manage your files and projects using Git.

<!-- TODO: Move the definition list below to a glossary repo? -->

So far, we have encountered the following terminology:

| Term | Definition |
|---------------------------|---------------------------------------------|
| **Version control** | The practice of tracking changes to files over time. |
| **Git** | A widely popular version control system that tracks changes to files and projects. |
| **(Git) Repository** | A "project" with files that are stored and tracked by Git. |
| **Commit** | A snapshot of changes made to file(s) in a repository. |
| **GitHub** | A company and website that hosts Git repositories. |
