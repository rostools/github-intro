# Version control with Git and GitHub {#sec-git-and-github}

This reading is meant as a primer to the workshop. It will introduce you
to the concepts of *version control*, *Git*, and *GitHub* which are
central concepts of the workshop and to working with files on GitHub in
general.

## What is version control and Git? {#sec-what-is-version-control}

In our work lives, we regularly work with files, such as creating or
editing them. These files can be anything from text documents, to
images, to code. When we work with files, we often make changes to them,
and sometimes many changes. We might want to keep track of how our files
change over time or "save" specific versions of the files. This tracking
of file changes over time is known as *version control*.

Version control can very useful for many reasons. For example, maybe you
want to keep track of changes to a file so you can revert back to a
previous version if you make a mistake. This is especially useful when
you are collaborating with others on a project, as everyone in the group
might want to keep track of changes made or feedback given by different
people.

But version control is also useful when you are working mostly alone on
a project, since we humans tend to forget things. For instance, you
might wonder why you made a certain change or what the file looked like
at a certain point in time by going back to that version.

If a file has the ability to internally "track changes", like Word does,
you may have used that before, maybe when getting feedback from others.
At the file level (not when opening it), you may have "tracked changes"
informally by saving multiple versions of a file with different names,
like in the example image below.

![File naming in a commonly used *informal* 'version
control'.](/images/informal-version-control.jpg){#fig-informal-version-control
fig-alt="A screenshot of a file explorer showing multiple versions of different files."}

Does this way of saving files and keeping track of versions look
familiar? The above image may exaggerate what some people's versioning
looks like, but there is some truth to it: It is the most common
approach to "version control".

This "informal" form of version control isn't ideal because it involves
multiple copies of the same file. It makes it difficult to keep track of
specific changes and find the right version of the files. Having
multiple versions of the same file as different names, as in the image,
really highlights the need for version control and that it is hard to
manually track file changes.

Luckily for us, there exist "formal" version control systems that
automatically track changes to files.

{{< include /includes/_git-basics.qmd >}}

To understand how powerful formal version control like Git is, consider
these questions:

-   How many files of different versions of a scientific document or
    thesis do you have lying around after getting feedback from your
    supervisor or co-authors?
-   Have you ever wanted to test an analysis in a file but ended up
    creating a new one to avoid modifying the original?
-   Have you ever deleted something and wished you hadn't?

All these problems can be fixed by using formal version control! There
are many good reasons to use version control, especially in science:

-   More organised files and folders, since you only need one version of
    each file.
-   Easier collaboration, because you can work on a single file/folder
    in a single central location.
-   Transparency of work done for others to see, which can protect
    against accusations of fraud or misconduct.
-   Claim to first discovery, since you have a time-stamped history of
    your work.
-   Easier to share your work with others, since you can share the
    repository with them.

## What is GitHub then? {#sec-what-is-git-and-github}

{{< include /includes/_github-basics.qmd >}}

## Why learn and use GitHub specifically? {#sec-why-github}

When you're learning something new, it helps to put it into a context.
While we've already covered some of this in the
[syllabus](/overview/syllabus.qmd), we haven't fully addressed probably
one of the biggest questions you may have: Why GitHub?

GitHub is an extremely popular and widely used online platform for
managing Git repositories. As you read previously, Git repositories come with a
lot of features to work with files and track changes to them. GitHub
does much more than that: It can be used for [project
management](https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects),
running automatic [workflows](https://docs.github.com/en/actions) that
do tasks for you, hosting [websites](https://docs.github.com/en/pages),
and
[collaborating](https://docs.github.com/en/get-started/using-github/github-flow)
with others, for example by reviewing each other's work. GitHub also
allows you to create tasks or notes (known as [GitHub
Issues](https://github.com/features/issues)) that are connected to your
project's repository. We'll create our own GitHub Issues later in this
workshop.

While there are other platforms that do similar things, such as
[GitLab](https://gitlab.com/) and [Bitbucket](https://bitbucket.org/),
GitHub is more widely used than the others and has a much larger
community. So you will be able to find many different resources, tools,
and projects on GitHub that you can use and learn from.

More and more researchers are using GitHub to do their research,
collaborate with others, and share their work. It is an extremely
effective and powerful way to collaborate. And because GitHub is
extensively indexed by search engines, as well as having its own search
engine, it is also a very effective way of making it easier for other
researchers to discover your work and research. It is a great way to
share your research and make it more [open and
accessible](https://en.wikipedia.org/wiki/Open_research).

In order to remain relevant and connected to the current and future
research community, we need to embrace and use tools that improve how we
do our work and how we disseminate our research. And GitHub is one of
these tools.

In that context, this workshop is designed as a gentle introduction
to using GitHub to manage your files related to your research and work.
Before diving into some of the more advanced uses, it's important to
learn about and try out the basics of Git and GitHub works and how to use it effectively.
In this workshop, our focus is to cover the most fundamental and
important features of GitHub that will help you get started with using
it for your own work.

## Summary of Git and GitHub

-   Using a *formal version control* system like Git can help you keep
    track of changes to your files and projects.
-   A Git *repository* is a place where you store all the files for your
    project along with their history.
-   GitHub is a website that hosts Git repositories, allowing you to
    store and share your files and projects online.
-   Through GitHub you can manage your files and projects using Git.

<!-- TODO: Move the definition list below to a glossary repo? -->

So far, we have encountered the following terminology:

| Term | Definition |
|---------------------------|---------------------------------------------|
| **Version control** | The practice of tracking changes to files over time. |
| **Git** | A widely popular version control system that tracks changes to files and projects. |
| **(Git) Repository** | A "project" with files that are stored and tracked by Git. |
| **Commit** | A snapshot of changes made to file(s) in a repository. |
| **GitHub** | A website that hosts Git repositories. |
