# Version control with Git and GitHub {#sec-git-and-github}

This reading is meant as a primer to the workshop. It will introduce you
to the concepts of *version control*, *Git*, and *GitHub* which are
central concepts of the workshop and to working with files on GitHub in
general.

## What is version control? {#sec-what-is-version-control}

Our work usually involves interacting with or changing files in some way
or another. These files can be anything from text documents, to images,
to code. When we change files, we may want to track what was changed and
how they change over time. This tracking changes to files is known as
*version control*.

Version control can very useful for many reasons. For example, you may
want to track changes so you can revert to an earlier change you made.
When you collaborate with others on a project, this is especially
useful, as everyone can track who and what was changed in the files you
work together on.

But version control is also useful when you are working mostly alone on
a project, as we humans tend to forget things. For instance, you may
wonder why you made a certain change or what the file looked like at a
certain point in time by going back to that version.

You may have used a file's internal "track changes", like in Word. At
the file level (not when opening it), you may have "tracked changes"
informally by saving multiple versions of a file with different names,
like in the example image below.

![File naming in a commonly used *informal* 'version
control'.](/images/informal-version-control.jpg){#fig-informal-version-control
fig-alt="A screenshot of a file explorer showing multiple versions of different files."}

Does the above image look familiar? While it may exaggerate what some
people's 'versioning' looks like, it is the most common approach people
use to "version control".

This "informal" way to do version control isn't ideal because it
involves multiple copies of the same file. It makes it difficult to keep
track of specific changes and find the right version of the files.
Having multiple versions of the same file as different names, as in the
image, really highlights that it is hard to manually track file changes
and that there is a need for version control.

Luckily for us, there are "formal" version control systems that
automatically track changes to files.

## What is Git {#sec-what-is-git}

{{< include /includes/_git-basics.qmd >}}

To understand how powerful formal version control like Git is, consider
these questions:

-   How many files of different versions of a scientific document or
    thesis do you have lying around after getting feedback from your
    supervisor or co-authors?
-   Have you ever wanted to test an analysis in a file but ended up
    creating a new one to avoid modifying the original?
-   Have you ever deleted something and wished you hadn't?

All these problems can be fixed by using formal version control! There
are many good reasons to use version control, especially in science:

-   More organised files and folders, since you only need one version of
    each file.
-   Easier collaboration, because you can work on a single file/folder
    in a single central location.
-   Transparency of work done for others to see, which can protect
    against accusations of fraud or misconduct.
-   Claim to first discovery, since you have a time-stamped history of
    your work.
-   Easier to share your work with others, since you can share the
    repository with them.

## What is GitHub then? {#sec-what-is-git-and-github}

{{< include /includes/_github-basics.qmd >}}

## Summary of Git and GitHub

-   Using a *formal version control* system like Git can help you keep
    track of changes to your files and projects.
-   A Git *repository* is a place where you store all the files for your
    project along with their history.
-   GitHub is a website that hosts Git repositories, allowing you to
    store and share your files and projects online.
-   Through GitHub you can manage your files and projects using Git.

<!-- TODO: Move the definition list below to a glossary repo? -->

So far, we have encountered the following terminology:

| Term | Definition |
|---------------------------|---------------------------------------------|
| **Version control** | The practice of tracking changes to files over time. |
| **Git** | A widely popular version control system that tracks changes to files and projects. |
| **(Git) Repository** | A "project" with files that are stored and tracked by Git. |
| **Commit** | A snapshot of changes made to file(s) in a repository. |
| **GitHub** | A website that hosts Git repositories. |
